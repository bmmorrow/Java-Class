import java.util.*;

//Compare Bubble Sort and MergeSort runtimes

public class MergeBubbleCompare {
    public static void main(String[] args) throws Exception {
        int array[] = {6, 3, 1, 2, 3, 6, 69, 43, 55, 23};

        //Test runtime for bubbleSort
        long startBubble = System.nanoTime();
        bubbleSort(array);
        System.out.println(Arrays.toString(array));
        long endBubble = System.nanoTime();
        System.out.println("bubbleSort elapsed time in nano seconds: "+ (endBubble - startBubble));

        System.out.println();

        long startMerge = System.nanoTime();
        mergeSort(array);
        for(int i = 0; i < array.length; i++){
            System.out.print(array[i]+ " ");
        }
        System.out.println();
        long endMerge = System.nanoTime();
        System.out.println("mergeSort elapsed runtime in nano seconds: " + (endMerge - startMerge));
    }

    //Implement MergeSort
    public static void mergeSort(int[] array) {

        int length = array.length;
        if (length <= 1) return; //base case

        int middle = length / 2;
        int[] leftArray = new int[middle];
        int[] rightArray = new int[length - middle];

        int i = 0; //left array
        int j = 0; //right array

        for(; i < length; i++){
            if (i < middle) {
                leftArray[i] = array[i];
            }
            else {
                rightArray[j] = array[i];
                j++;
            }
        }
        mergeSort(leftArray);
        mergeSort(rightArray);
        merge(leftArray, rightArray, array);
    }

    //Helper method Merge
    public static void merge(int[] leftArray, int[] rightArray, int[] array){

        int leftSize = array.length / 2;
        int rightSize = array.length - leftSize;
        int i = 0, l = 0, r = 0; //indices

        //check the conditions for merging
        while(l < leftSize && r < rightSize) {
            if(leftArray[l] < rightArray[r]) {
                array[i] = leftArray[l];
                i++;
                l++;
            }
            else {
                array[i] = rightArray[r];
                i++;
                r++;
            }
        }
        while(l < leftSize) {
            array[i] = leftArray[l];
            i++;
            l++;
        }
        while(r < rightSize) {
            array[i] = rightArray[r];
            i++;
            r++;
        }
    }

    //Implement BubbleSort
    public static void bubbleSort(int[] array) { 
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
}
